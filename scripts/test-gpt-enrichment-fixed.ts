import { config } from 'dotenv';
import { enrichReportWithGPT } from '../src/utils/openai';

// Load environment variables from .env file
config();

async function testGPTEnrichment() {
  console.log('🧪 Testing GPT-4o Report Enrichment...\n');

  // Check if API key is loaded
  if (!process.env.OPENAI_API_KEY) {
    console.error('❌ OPENAI_API_KEY not found in environment variables');
    console.log('💡 Make sure your .env file contains: OPENAI_API_KEY=your-api-key');
    return;
  }

  console.log('✅ OPENAI_API_KEY loaded successfully');

  // Sample report content for testing
  const sampleReport = `# Tour Vendor Analytics Report

This report analyzes customer behavior patterns across major travel platforms to help tour vendors understand market opportunities and optimize their strategies.

## 📊 Platform Performance Analysis

### GetYourGuide Performance
- **Total Activities**: 15,432
- **Average Rating**: 4.3/5
- **Average Price**: €45.20
- **Top Categories**: City Tours, Food & Drink, Outdoor Activities

### Viator Performance  
- **Total Activities**: 12,891
- **Average Rating**: 4.2/5
- **Average Price**: €52.10
- **Top Categories**: Day Trips, Cultural Tours, Adventure

## 🎯 Customer Insights

### Most Popular Activities
1. **City Walking Tours** (23% of bookings)
2. **Food & Wine Experiences** (18% of bookings)
3. **Day Trips & Excursions** (15% of bookings)
4. **Adventure Activities** (12% of bookings)

### Pricing Trends
- **Budget Range** (€0-25): 15% of activities
- **Mid-Range** (€26-75): 45% of activities  
- **Premium** (€76-150): 30% of activities
- **Luxury** (€151+): 10% of activities

## 📈 Market Opportunities

### Emerging Trends
- **Sustainable Tourism**: 25% growth in eco-friendly activities
- **Local Experiences**: 18% increase in authentic local tours
- **Small Group Tours**: 22% rise in intimate group experiences
- **Digital Integration**: 30% growth in app-based tour experiences

### Seasonal Patterns
- **Peak Season** (June-August): 40% of annual bookings
- **Shoulder Season** (April-May, September-October): 35% of bookings
- **Off-Season** (November-March): 25% of bookings

## 💡 Strategic Recommendations

### Content Strategy
- Focus on trending topics like sustainable tourism and local experiences
- Develop multi-language content for international markets
- Create platform-specific content strategies

### Platform Strategy
- Primary focus on GetYourGuide for European markets
- Secondary opportunities on Viator for global reach
- Monitor emerging platforms for early adoption advantages

### Quality & Trust
- Emphasize verified content and community validation
- Build trust through transparent pricing and clear policies
- Leverage customer reviews and ratings for credibility

---

*Report generated by Hub Inbox Analytics - Your comprehensive travel content intelligence platform*`;

  try {
    console.log('📝 Original Report Content:');
    console.log('=' .repeat(50));
    console.log(sampleReport.substring(0, 300) + '...\n');

    console.log('🎯 Applying GPT-4o Enrichment...');
    const { enrichedContent, shareSuggestions } = await enrichReportWithGPT(sampleReport);

    console.log('✅ Enrichment Complete!\n');
    
    console.log('📝 Enriched Report Content:');
    console.log('=' .repeat(50));
    console.log(enrichedContent.substring(0, 500) + '...\n');

    console.log('📱 Share Suggestions:');
    console.log('=' .repeat(30));
    shareSuggestions.forEach((suggestion, index) => {
      console.log(`${index + 1}. ${suggestion}`);
    });

    console.log('\n🎉 Test completed successfully!');
    console.log('\nKey Enhancements Applied:');
    console.log('✅ Emotional framing for title and introduction');
    console.log('✅ "What This Means for You" summary boxes');
    console.log('✅ Tweet-style share suggestions');
    console.log('✅ Enhanced engagement and readability');

  } catch (error) {
    console.error('❌ Error during enrichment test:', error);
  }
}

// Run the test if this file is executed directly
if (require.main === module) {
  testGPTEnrichment()
    .then(() => {
      console.log('\n🏁 Test finished');
      process.exit(0);
    })
    .catch((error) => {
      console.error('💥 Test failed:', error);
      process.exit(1);
    });
} 