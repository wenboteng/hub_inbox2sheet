generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model Article {
  id            String             @id @default(cuid())
  url           String             @unique
  question      String
  answer        String
  category      String
  platform      String
  lastUpdated   DateTime           @default(now())
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  contentType   String             @default("official")
  source        String             @default("help_center")
  author        String?
  votes         Int                @default(0)
  isVerified    Boolean            @default(false)
  contentHash   String?
  isDuplicate   Boolean            @default(false)
  crawlMode     String             @default("discovery")
  crawlStatus   String             @default("active")
  etag          String?
  lastCheckedAt DateTime?
  lastModified  String?
  language      String             @default("en")
  slug          String             @unique
  paragraphs    ArticleParagraph[]

  @@index([platform])
  @@index([category])
  @@index([lastUpdated])
  @@index([contentType])
  @@index([source])
  @@index([contentHash])
  @@index([lastCheckedAt])
  @@index([crawlMode])
  @@index([crawlStatus])
  @@index([language])
}

model Answer {
  id                   String   @id @default(cuid())
  question             String
  answer               String
  firstAnswerParagraph String?
  summary              String?
  sourceUrl            String   @unique
  platform             String
  category             String
  tags                 String[]
  dateCollected        DateTime @default(now())
  lastCrawled          DateTime @default(now())
  crawlFrequency       String   @default("daily")
  isActive             Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([platform])
  @@index([category])
  @@index([tags])
  @@index([lastCrawled])
}

model CrawlJob {
  id        String    @id @default(cuid())
  source    String
  status    String
  startedAt DateTime?
  endedAt   DateTime?
  error     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model SubmittedQuestion {
  id           String   @id @default(cuid())
  question     String
  platform     String
  email        String?
  status       String   @default("pending")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  manualAnswer String?
  isPublic     Boolean  @default(false)
  sourceUrl    String?
  tags         String[]
  aiGenerated  Boolean  @default(false)
  tone         String?
  embedding    Float[]

  @@index([platform])
  @@index([status])
}

model ArticleParagraph {
  id        String  @id @default(cuid())
  articleId String
  text      String
  embedding Json
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([articleId])
}

model CrawlQueue {
  id          String    @id @default(cuid())
  url         String    @unique
  platform    String
  type        String
  status      String    @default("pending")
  priority    Int       @default(5)
  firstSeen   DateTime  @default(now())
  lastChecked DateTime?
  retryCount  Int       @default(0)
  error       String?
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([platform])
  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([firstSeen])
  @@index([lastChecked])
}

model Report {
  id        String   @id @default(uuid())
  type      String   @unique
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPublic  Boolean  @default(true)
  slug      String   @unique
}

model ImportedGYGActivity {
  id                 String    @id @default(cuid())
  originalId         String    @unique
  activityName       String
  providerName       String
  location           String
  priceText          String?
  priceNumeric       Float?
  ratingText         String?
  ratingNumeric      Float?
  reviewCountText    String?
  reviewCountNumeric Int?
  duration           String?
  description        String?
  extractionQuality  String?
  tags               String[]
  url                String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  importedAt         DateTime  @default(now())
  city               String?
  cleanedAt          DateTime?
  country            String?
  durationDays       Int?
  durationHours      Int?
  priceCurrency      String?
  qualityScore       Int?
  venue              String?

  @@index([providerName])
  @@index([location])
  @@index([ratingNumeric])
  @@index([priceNumeric])
  @@index([extractionQuality])
  @@index([importedAt])
  @@index([cleanedAt])
  @@index([qualityScore])
  @@index([city])
  @@index([country])
}

model ImportedMadridActivity {
  id                 String    @id @default(cuid())
  originalId         String    @unique
  activityName       String
  ratingText         String?
  ratingNumeric      Float?
  reviewCountText    String?
  reviewCountNumeric Int?
  priceText          String?
  priceNumeric       Float?
  activityUrl        String?
  rawText            String?
  extractionMethod   String?
  extractionQuality  String?
  screenshotPath     String?
  timestamp          String?
  sessionId          Int?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  importedAt         DateTime  @default(now())
  cleanedAt          DateTime?
  qualityScore       Int?
  priceCurrency      String?
  city               String?
  country            String?
  venue              String?
  durationHours      Int?
  durationDays       Int?

  @@index([ratingNumeric])
  @@index([priceNumeric])
  @@index([extractionQuality])
  @@index([importedAt])
  @@index([cleanedAt])
  @@index([qualityScore])
  @@index([city])
  @@index([country])
}

model ImportedGYGProvider {
  id          String   @id @default(cuid())
  originalId  String   @unique
  name        String
  description String?
  location    String?
  rating      Float?
  reviewCount Int?
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  importedAt  DateTime @default(now())

  @@index([name])
  @@index([location])
  @@index([rating])
  @@index([importedAt])
}
