generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model Article {
  id                 String             @id @default(cuid())
  url                String             @unique
  question           String
  answer             String
  category           String
  platform           String
  lastUpdated        DateTime           @default(now())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  contentType        String             @default("official")
  source             String             @default("help_center")
  author             String?
  votes              Int                @default(0)
  isVerified         Boolean            @default(false)
  contentHash        String?
  isDuplicate        Boolean            @default(false)
  crawlMode          String             @default("discovery")
  crawlStatus        String             @default("active")
  etag               String?
  lastCheckedAt      DateTime?
  lastModified       String?
  language           String             @default("en")
  slug               String             @unique
  aiSummary          String?
  keyPoints          String[]           @default([])
  actionItems        String[]           @default([])
  urgency            String?
  impact             String?
  summaryGeneratedAt DateTime?
  // Progressive disclosure fields
  aiSummaryGenerated Boolean            @default(false)
  keyPointsGenerated Boolean            @default(false)
  actionItemsGenerated Boolean          @default(false)
  aiSummaryRequestedAt DateTime?
  keyPointsRequestedAt DateTime?
  actionItemsRequestedAt DateTime?
  categoryConfidence Float?
  paragraphs         ArticleParagraph[]
  // User interaction relations
  userInteractions   UserInteraction[]
  savedQuestions     SavedQuestion[]

  @@index([platform])
  @@index([category])
  @@index([lastUpdated])
  @@index([contentType])
  @@index([source])
  @@index([contentHash])
  @@index([lastCheckedAt])
  @@index([crawlMode])
  @@index([crawlStatus])
  @@index([language])
  @@index([summaryGeneratedAt])
}

model Answer {
  id                   String   @id @default(cuid())
  question             String
  answer               String
  firstAnswerParagraph String?
  summary              String?
  sourceUrl            String   @unique
  platform             String
  category             String
  tags                 String[]
  dateCollected        DateTime @default(now())
  lastCrawled          DateTime @default(now())
  crawlFrequency       String   @default("daily")
  isActive             Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([platform])
  @@index([category])
  @@index([tags])
  @@index([lastCrawled])
}

model CrawlJob {
  id        String    @id @default(cuid())
  source    String
  status    String
  startedAt DateTime?
  endedAt   DateTime?
  error     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model SubmittedQuestion {
  id           String   @id @default(cuid())
  question     String
  platform     String
  email        String?
  status       String   @default("pending")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  manualAnswer String?
  isPublic     Boolean  @default(false)
  sourceUrl    String?
  tags         String[]
  aiGenerated  Boolean  @default(false)
  tone         String?
  embedding    Float[]

  @@index([platform])
  @@index([status])
}

model ArticleParagraph {
  id        String  @id @default(cuid())
  articleId String
  text      String
  embedding Json
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([articleId])
}

model CrawlQueue {
  id          String    @id @default(cuid())
  url         String    @unique
  platform    String
  type        String
  status      String    @default("pending")
  priority    Int       @default(5)
  firstSeen   DateTime  @default(now())
  lastChecked DateTime?
  retryCount  Int       @default(0)
  error       String?
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([platform])
  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([firstSeen])
  @@index([lastChecked])
}

model Report {
  id        String   @id @default(uuid())
  type      String   @unique
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPublic  Boolean  @default(true)
  slug      String   @unique
}

model ImportedGYGActivity {
  id                 String    @id @default(cuid())
  originalId         String    @unique
  activityName       String
  providerName       String
  location           String
  priceText          String?
  priceNumeric       Float?
  ratingText         String?
  ratingNumeric      Float?
  reviewCountText    String?
  reviewCountNumeric Int?
  duration           String?
  description        String?
  extractionQuality  String?
  tags               String[]
  url                String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  importedAt         DateTime  @default(now())
  city               String?
  cleanedAt          DateTime?
  country            String?
  durationDays       Int?
  durationHours      Int?
  priceCurrency      String?
  qualityScore       Int?
  venue              String?

  @@index([providerName])
  @@index([location])
  @@index([ratingNumeric])
  @@index([priceNumeric])
  @@index([extractionQuality])
  @@index([importedAt])
  @@index([cleanedAt])
  @@index([qualityScore])
  @@index([city])
  @@index([country])
}

model CleanedActivity {
  id                 String    @id @default(cuid())
  originalId         String    @unique
  activityName       String
  providerName       String
  location           String
  city               String
  country            String
  region             String?   // Europe, UK, etc.
  
  // Pricing with local currency preservation
  priceNumeric       Float?
  priceCurrency      String    // £ for UK, € for Europe, etc.
  priceText          String?
  
  // Ratings and reviews
  ratingNumeric      Float?
  ratingText         String?
  reviewCountNumeric Int?
  reviewCountText    String?
  
  // Activity details
  category           String?   // walking-tour, food-tour, etc.
  activityType       String?   // tour, experience, workshop, etc.
  duration           String?
  durationHours      Int?
  durationDays       Int?
  description        String?
  venue              String?
  
  // Quality and tracking
  qualityScore       Int       @default(0) // 0-100
  cleanedAt          DateTime  @default(now())
  originalSource     String    // 'gyg' or 'viator'
  platform           String    // 'gyg' or 'viator'
  
  // Original data reference
  originalTableId    String?   // Reference to ImportedGYGActivity.id
  
  // URLs
  url                String?
  
  // Metadata
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([providerName])
  @@index([location])
  @@index([city])
  @@index([country])
  @@index([region])
  @@index([ratingNumeric])
  @@index([priceNumeric])
  @@index([priceCurrency])
  @@index([category])
  @@index([activityType])
  @@index([qualityScore])
  @@index([cleanedAt])
  @@index([platform])
  @@index([originalSource])
}

model UserProduct {
  id                 String    @id @default(cuid())
  userId             String    // Reference to User.id
  productName        String?   // Optional for provider-based linking
  providerName       String
  location           String?
  city               String?
  country            String?
  region             String?   // UK, Europe, etc.
  
  // Pricing
  priceNumeric       Float?
  priceCurrency      String?   // £ for UK, € for Europe, etc.
  priceText          String?
  
  // Performance metrics
  ratingNumeric      Float?
  ratingText         String?
  reviewCountNumeric Int?
  reviewCountText    String?
  
  // Product details
  category           String?   // walking-tour, food-tour, etc.
  activityType       String?   // tour, experience, workshop, etc.
  duration           String?
  durationHours      Int?
  durationDays       Int?
  description        String?
  venue              String?
  
  // Platform and tracking
  platform           String?   // 'gyg', 'viator', 'own-website', etc.
  url                String?
  isActive           Boolean   @default(true)
  
  // Provider linking fields
  linkedActivityCount Int?     // Number of activities linked to this provider
  linkedAt            DateTime? // When the provider was linked
  
  // Market comparison data (computed)
  marketAveragePrice Float?
  marketAverageRating Float?
  priceCompetitiveness Float?  // Percentage above/below market
  ratingCompetitiveness Float? // Percentage above/below market
  
  // Metadata
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  user               User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([city])
  @@index([country])
  @@index([region])
  @@index([priceNumeric])
  @@index([ratingNumeric])
  @@index([platform])
  @@index([isActive])
  @@index([linkedAt])
}

model ImportedMadridActivity {
  id                 String    @id @default(cuid())
  originalId         String    @unique
  activityName       String
  ratingText         String?
  ratingNumeric      Float?
  reviewCountText    String?
  reviewCountNumeric Int?
  priceText          String?
  priceNumeric       Float?
  activityUrl        String?
  rawText            String?
  extractionMethod   String?
  extractionQuality  String?
  screenshotPath     String?
  timestamp          String?
  sessionId          Int?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  importedAt         DateTime  @default(now())
  cleanedAt          DateTime?
  qualityScore       Int?
  priceCurrency      String?
  city               String?
  country            String?
  venue              String?
  durationHours      Int?
  durationDays       Int?

  @@index([ratingNumeric])
  @@index([priceNumeric])
  @@index([extractionQuality])
  @@index([importedAt])
  @@index([cleanedAt])
  @@index([qualityScore])
  @@index([city])
  @@index([country])
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  passwordHash      String?
  subscriptionTier  String    @default("free") // "free", "registered", "premium"
  subscriptionStatus String   @default("active") // "active", "cancelled", "expired"
  subscriptionEndDate DateTime?
  city              String?   // For UK market focus
  country           String?   @default("UK")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Usage tracking
  aiRequestsToday   Int       @default(0)
  aiRequestsLimit   Int       @default(5) // Free tier limit
  lastAiRequestDate DateTime?
  
  // User preferences
  preferredPlatforms String[] @default([])
  interests         String[] @default([])
  
  // Relations
  userInteractions  UserInteraction[]
  savedQuestions    SavedQuestion[]
  userReports       UserReport[]
  userProducts      UserProduct[]

  @@index([email])
  @@index([subscriptionTier])
  @@index([city])
  @@index([country])
}

model UserInteraction {
  id        String   @id @default(cuid())
  userId    String
  questionId String
  action    String   // "view", "search", "ai_summary", "ai_keypoints", "ai_actions"
  timestamp DateTime @default(now())
  metadata  Json?
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question  Article  @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([questionId])
  @@index([action])
  @@index([timestamp])
}

model SavedQuestion {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  savedAt    DateTime @default(now())
  notes      String?
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   Article  @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  @@index([userId])
  @@index([questionId])
}

model UserReport {
  id        String   @id @default(cuid())
  userId    String
  reportType String  // "market_analysis", "competitor_watch", "opportunities"
  city      String?
  category  String?
  generatedAt DateTime @default(now())
  content   String   // JSON or markdown content
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([reportType])
  @@index([city])
  @@index([generatedAt])
}
