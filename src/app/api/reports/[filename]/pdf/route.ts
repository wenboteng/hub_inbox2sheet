import prisma from '@/lib/prisma';
import { NextRequest, NextResponse } from 'next/server';
import { createBrowser } from '@/utils/puppeteer';
import { marked } from 'marked';

export async function GET(request: NextRequest, { params }: { params: { filename: string } }) {
  try {
    const { filename } = params;
    
    // Find the report
    const report = await prisma.report.findFirst({
      where: {
        OR: [
          { id: filename },
          { type: filename },
          { slug: filename },
        ],
      },
    });

    if (!report) {
      return NextResponse.json({ error: 'Report not found' }, { status: 404 });
    }

    // Convert Markdown to HTML
    const reportHtml = marked.parse(report.content);

    // Generate PDF using Puppeteer with proper Chrome installation
    const browser = await createBrowser();

    const page = await browser.newPage();
    
    // Set viewport for consistent rendering
    await page.setViewport({ width: 1200, height: 800 });

    // Create HTML content for the PDF
    const htmlContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <title>${report.title}</title>
          <style>
            body {
              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
              line-height: 1.6;
              color: #333;
              max-width: 800px;
              margin: 0 auto;
              padding: 40px 20px;
            }
            h1, h2, h3, h4, h5, h6 {
              color: #1a365d;
              margin-top: 2em;
              margin-bottom: 1em;
              font-weight: 700;
            }
            h1 { font-size: 2.2em; border-bottom: 3px solid #3182ce; padding-bottom: 10px; }
            h2 { font-size: 1.6em; border-bottom: 2px solid #3182ce; padding-bottom: 6px; }
            h3 { font-size: 1.3em; }
            ul, ol {
              margin-bottom: 16px;
              padding-left: 30px;
            }
            li {
              margin-bottom: 8px;
            }
            blockquote {
              border-left: 4px solid #3182ce;
              padding-left: 20px;
              margin: 20px 0;
              font-style: italic;
              color: #4a5568;
              background: #f7fafc;
            }
            table {
              width: 100%;
              border-collapse: collapse;
              margin: 20px 0;
              font-size: 0.98em;
            }
            th, td {
              border: 1px solid #e2e8f0;
              padding: 12px;
              text-align: left;
            }
            th {
              background-color: #f7fafc;
              font-weight: 600;
            }
            code, pre {
              background: #f7fafc;
              border-radius: 4px;
              padding: 2px 6px;
              font-size: 0.95em;
              color: #2d3748;
            }
            .footer {
              margin-top: 40px;
              padding-top: 20px;
              border-top: 1px solid #e2e8f0;
              font-size: 14px;
              color: #718096;
              text-align: center;
            }
          </style>
        </head>
        <body>
          <h1>${report.title}</h1>
          <div class="content">
            ${reportHtml}
          </div>
          <div class="footer">
            <p>Generated by OTAAnswers Hub | ${new Date().toLocaleDateString()}</p>
          </div>
        </body>
      </html>
    `;

    await page.setContent(htmlContent);

    // Generate PDF
    const pdf = await page.pdf({
      format: 'A4',
      margin: {
        top: '20mm',
        right: '20mm',
        bottom: '20mm',
        left: '20mm'
      },
      printBackground: true,
      displayHeaderFooter: false
    });

    await browser.close();

    // Return PDF with proper headers
    return new NextResponse(pdf, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${report.slug || report.type}.pdf"`,
        'Content-Length': pdf.length.toString()
      }
    });

  } catch (error) {
    console.error('PDF generation error:', error);
    return NextResponse.json({ error: 'Failed to generate PDF' }, { status: 500 });
  }
} 