# Render Blueprint for ota-answer-hub
# This file defines the infrastructure for the application, including a web
# service and multiple cron jobs for different platforms. It uses an Environment Group to securely
# manage and share environment variables between the services.
# See https://render.com/docs/blueprint-spec for a detailed reference.

envVarGroups:
  - name: ota-hub-secrets
    envVars:
      - key: DATABASE_URL
        sync: false
      - key: NEXT_PUBLIC_BASE_URL
        sync: false
      - key: OPENAI_API_KEY
        sync: false
      - key: NODE_VERSION
        value: "18.20.2"
      # The PUPPETEER variables are essential for the cron job to install
      # and cache the Chrome browser correctly in Render's environment.
      - key: PUPPETEER_CACHE_DIR
        value: /opt/render/.cache/puppeteer
      - key: PUPPETEER_SKIP_CHROMIUM_DOWNLOAD
        value: "false"
      # Optional secrets for other data sources can be added here.
      - key: EXPEDIA_USERNAME
        sync: false
      - key: EXPEDIA_PASSWORD
        sync: false
      - key: EXPEDIA_SESSION_COOKIE
        sync: false
      - key: BOOKING_API_TOKEN
        sync: false
      - key: BOOKING_SESSION_COOKIE
        sync: false
      - key: BOOKING_XSRF_TOKEN
        sync: false
      - key: AIRBNB_USERNAME
        sync: false
      - key: AIRBNB_PASSWORD
        sync: false
      - key: REDDIT_CLIENT_ID
        sync: false
      - key: REDDIT_CLIENT_SECRET
        sync: false

services:
  # Main Next.js Web Application
  - type: web
    name: ota-answer-hub
    runtime: node
    buildCommand: |
      npm install
      npx prisma generate
      npx prisma migrate deploy
      npm run build
    startCommand: npm start
    healthCheckPath: /
    autoDeploy: true
    buildFilter:
      paths:
        - "src/**"
        - "prisma/**"
        - "public/**"
        - "package.json"
        - "next.config.js"
        - "render.yaml"
    envVars:
      - fromGroup: ota-hub-secrets

  # Main scraping cron job (every hour) - Reddit and Airbnb
  - type: cron
    name: ota-answer-hub-main-crawler
    runtime: node
    plan: starter
    schedule: "0 * * * *" # Runs every hour
    autoDeploy: true
    buildCommand: |
      echo "Build started for main crawler (Reddit + Airbnb)..."
      npm install
      npx prisma generate
      npx prisma migrate deploy
      npm run build:scripts
      echo "Main crawler build completed successfully."
    startCommand: npm run scrape:main
    envVars:
      - fromGroup: ota-hub-secrets
    buildFilter:
      paths:
        - package.json
        - src/**
        - prisma/**
        - VERSION
        - render.yaml
        - tsconfig.json
        - tsconfig.scripts.json

  # Secondary scraping cron job (every 2 hours) - TripAdvisor and StackOverflow
  - type: cron
    name: ota-answer-hub-secondary-crawler
    runtime: node
    plan: starter
    schedule: "0 */2 * * *" # Runs every 2 hours
    autoDeploy: true
    buildCommand: |
      echo "Build started for secondary crawler (TripAdvisor + StackOverflow)..."
      npm install
      npx prisma generate
      npx prisma migrate deploy
      npm run build:scripts
      echo "Secondary crawler build completed successfully."
    startCommand: npm run scrape:secondary
    envVars:
      - fromGroup: ota-hub-secrets
    buildFilter:
      paths:
        - package.json
        - src/**
        - prisma/**
        - VERSION
        - render.yaml
        - tsconfig.json
        - tsconfig.scripts.json

  # Tertiary scraping cron job (every 4 hours) - Viator, GetYourGuide, Expedia, Booking
  - type: cron
    name: ota-answer-hub-tertiary-crawler
    runtime: node
    plan: starter
    schedule: "0 */4 * * *" # Runs every 4 hours
    autoDeploy: true
    buildCommand: |
      echo "Build started for tertiary crawler (Viator, GetYourGuide, Expedia, Booking)..."
      npm install
      npx prisma generate
      npx prisma migrate deploy
      npm run build:scripts
      echo "Tertiary crawler build completed successfully."
    startCommand: npm run scrape:tertiary
    envVars:
      - fromGroup: ota-hub-secrets
    buildFilter:
      paths:
        - package.json
        - src/**
        - prisma/**
        - VERSION
        - render.yaml
        - tsconfig.json
        - tsconfig.scripts.json

  # Weekly comprehensive scraping (every Sunday at 2 AM)
  - type: cron
    name: ota-answer-hub-weekly-crawler
    runtime: node
    plan: starter
    schedule: "0 2 * * 0" # Runs every Sunday at 2 AM
    autoDeploy: true
    buildCommand: |
      echo "Build started for weekly comprehensive crawler..."
      npm install
      npx prisma generate
      npx prisma migrate deploy
      npm run build:scripts
      echo "Weekly crawler build completed successfully."
    startCommand: npm run scrape:all
    envVars:
      - fromGroup: ota-hub-secrets
    buildFilter:
      paths:
        - package.json
        - src/**
        - prisma/**
        - VERSION
        - render.yaml
        - tsconfig.json
        - tsconfig.scripts.json

  # Weekly SEO optimization pipeline (every Sunday at 4 AM)
  - type: cron
    name: ota-answer-hub-seo-pipeline
    runtime: node
    plan: starter
    schedule: "0 4 * * 0" # Runs every Sunday at 4 AM
    autoDeploy: true
    buildCommand: |
      echo "Build started for SEO optimization pipeline..."
      npm install
      npx prisma generate
      npx prisma migrate deploy
      npm run build:scripts
      echo "SEO pipeline build completed successfully."
    startCommand: npm run seo:pipeline
    envVars:
      - fromGroup: ota-hub-secrets
    buildFilter:
      paths:
        - package.json
        - src/**
        - prisma/**
        - VERSION
        - render.yaml
        - tsconfig.json
        - tsconfig.scripts.json 