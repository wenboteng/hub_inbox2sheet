generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model Article {
  id          String   @id @default(cuid())
  url         String   @unique
  question    String
  answer      String
  category    String
  platform    String
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  paragraphs  ArticleParagraph[]

  @@index([platform])
  @@index([category])
  @@index([lastUpdated])
}

model Answer {
  id                   String   @id @default(cuid())
  question             String
  answer               String
  firstAnswerParagraph String?
  summary              String?
  sourceUrl            String   @unique
  platform             String
  category             String
  tags                 String[]
  dateCollected        DateTime @default(now())
  lastCrawled          DateTime @default(now())
  crawlFrequency       String   @default("daily")
  isActive             Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([platform])
  @@index([category])
  @@index([tags])
  @@index([lastCrawled])
}

model CrawlJob {
  id        String    @id @default(cuid())
  source    String
  status    String
  startedAt DateTime?
  endedAt   DateTime?
  error     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model SubmittedQuestion {
  id           String   @id @default(cuid())
  question     String
  platform     String
  email        String?
  status       String   @default("pending")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  manualAnswer String?
  isPublic     Boolean  @default(false)
  sourceUrl    String?
  tags         String[]
  aiGenerated  Boolean  @default(false)
  tone         String?
  embedding    Float[]

  @@index([platform])
  @@index([status])
}

model ArticleParagraph {
  id        String   @id @default(cuid())
  articleId String
  text      String   @db.Text
  embedding Json     // Store embeddings as JSON array
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([articleId])
}
